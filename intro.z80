; 1Kraftwerk

; Amstrad CPC 1K intro by PulkoMandy/Shinra for Forever 2020
; Music by Kraftwerk

; ---------------------------------
; Useful system vectors
; ---------------------------------

SYS_PEN  equ $BBDE
	; A = new pen
	; AF is corrupt, and all other registers are preserved

SYS_GETPEN equ $BBE1

SYS_INK equ $BC32
	; A = PEN
	; BC = INK (x2 because flashing)
	; AF, BC, DE and HL are corrupt, and all others are preserved
SYS_SET_BORDER equ $BC38

SYS_MOVE   equ $BBC0
	; AF, BC, DE and HL are corrupt
SYS_SETORG equ $BBC9
	; AF, BC, DE and HL are corrupt
SYS_LINE   equ $BBF6
	; AF, BC, DE and HL are corrupt
	; DE = X
	; HL = Y

SYS_RLINE  equ $BBF9

SYS_FILL   equ $BD52
	; A = pen number
	; HL = work buffer
	; DE = work buffer size

; It starts!
_start

; We expect to be called with RUN", which sets mode 1 and clear the screen.

; Set the color palette
	XOR A
	LD B,6 ; BLACK
	LD C,B
	CALL SYS_INK

	LD B, 0 ; RED
	LD C, B
	PUSH BC
	PUSH BC
	LD A,1
	CALL SYS_INK

	LD A,2
	POP BC
	CALL SYS_INK

	POP BC
	CALL SYS_SET_BORDER

	LD A,1
	LD IX, MEN - 4

newpoly
	; Move on to pen 2 if we were asked to
	BIT 7,D ; Shall we chage inks?
	CALL NZ,SYS_PEN

	LD BC, 4
	ADD IX,BC

	LD E,(IX+0)
	LD D,(IX+1)
	LD L,(IX+2)
	LD H,(IX+3)

	CALL SYS_MOVE

newline
	; CALL &BD19

	INC IX
	INC IX

	LD D,0
	LD H,0

	LD E,(IX+0)
	LD L,(IX+1)

	LD A,E
	CP $80
	JR Z,fill

	BIT 7,E
	JR Z,posx
	DEC D

posx
	BIT 7,L
	JR Z,posy
	DEC H
posy
	CALL SYS_RLINE

	JR newline

fill
	INC IX
	LD E,(IX+0)
	LD D,(IX+1)
	LD L,(IX+2)
	LD H,(IX+3)
	PUSH DE

	LD A,&3F
	AND D
	LD D,A

	; Fill the polygon, we need to move to the fill coordinates
	CALL SYS_MOVE

	; Use the correct color
	CALL SYS_GETPEN
	; fill the poly
	LD HL,fillbuf but hopefully whatever value is ok
	;LD DE,... DE should holdthe buffer size, but whatever value it has is ok
	CALL SYS_FILL

	POP DE
	LD A,2

	BIT 6,D ; Are we done yet?
	JR Z,newpoly

	LD A,1
	LD HL,env
	CALL &BCBC

	LD A,3
	LD (env+3),A
	LD HL,env
	CALL &BCBC

	LD A,2
	LD HL,henv
	CALL &BCBC

	LD A,4
	LD HL,envnoise
	CALL &BCBC

	LD A,1
	LD HL,envt
	CALL &BCBF

	LD A,96
	LD (envt+2),A
	LD A,2
	LD HL,envt
	CALL &BCBF

	; let the music play!
let_the_music
	LD HL,(mp1)

	CALL &BCAA
	JR NC,queue_full

	; Note played, move on to next one for next time
	LD HL,(mp1)
	LD DE,9
	ADD HL,DE

	XOR A
	CP (HL)
	JR NZ,cont

	INC HL
	DEC (HL)
	JR Z, contloop
	LD HL,music
	JR cont

contloop
	INC (HL)
	LD HL,music.loop
cont
	LD (mp1),HL

queue_full

	LD HL,(mp2)

	CALL &BCAA
	JR NC,full2

	; Note played, move on to next one for next time
	LD HL,(mp2)
	LD DE,9
	ADD HL,DE

	XOR A
	CP (HL)
	JR NZ,cont2

	INC HL
	DEC (HL)
	JR Z,cl2
	LD HL,ch2
	JR cont2

cl2
	INC (HL)
	LD HL,ch2.loop
cont2
	LD (mp2),HL
	
full2
	LD HL,(mp3)

	CALL &BCAA
	JR NC,let_the_music

	; Note played, move on to next one for next time
	LD HL,(mp3)
	LD DE,9
	ADD HL,DE

	XOR A
	CP (HL)
	JR NZ,cont3
	LD HL,ch3.loop
cont3
	LD (mp3),HL
	
	LD HL,(tptr)
	LD A,(HL)
	CP &FF
	JR Z,rewindtxt

	INC HL
	LD (tptr), HL

	CALL &BB5A

	JR let_the_music

rewindtxt
	LD HL,textloop
	LD (tptr),HL
	JR let_the_music

; The DATA

; A marker to easily spot the escape sequences (fill, end of stream, set pen)
p equ 0x8000
e equ 0x4000

; The men

MEN
	defw 41, 0
	defb 12, 9, 13, 88, -8, 7, 6, 26, 9, 5, 7, 1, -4, 11, 3, 9, 7, 3, 7, -4
	defb 1, -9, -3, -10, 12, -5, 9, -24, -8, -24, -6, 0, 1, -10, -2, -33
	defb -6, -30, 2, -10, -13, 0, 2, 70, -14, -28, -10, -42, -17, 0, &80
	defw 55, 4

	defw 229, 0
	defb 4, 6, -2, 33, 2, 47, -11, 16, 5, 27, 12, 8, -3, 14, 9, 7, 6, -3
	defb 1, -16, 14, -5, 14, -23, -2, -21, -14, 26, -11, -107, 3, -5, -6, -3
	defb -4, 11, 1, 60, -4, -43, -2, -29, -12, 0, &80
	defw 235, 4

	defw 377, 0
	defb 4, 85, -12, 13, 10, 25, 13, 6, -2, 17, 6, 3, 9, -5, 0, -15, 12, -5
	defb 21, -26, -16, 0, -7, 11, -4, -9, -5, -93, 6, -7, -16, 0, 2, 69
	defb -6, -17, -6, -52, -9, 0, &80
	defw 385, 6

	defw 559, 2
	defb 10, 10, -4, 21, 11, 50, 1, 15, -3, 18, -4, -7, 1, -13, -7, 0, -5, 14
	defb 11, 27, 17, 8, -1, 9, 4, 10, 10, -1, 3, -11, -5, -9, 14, -8, 7, -29
	defb -9, -24, -3, -44, -8, -29, 5, -8, -8, -1, -10, 6, 6, 65, -14, -29
	defb 0, -30, -4, -11, -15, 1, &80
	defw p|565, 4 ; TODO also change pen

	defw 52, 0
	defb 4, 86, -51, 0, 1, 12, 99, 1, 0, -13, -43, -1, -3, -85, -7, 0, &80
	defw 55, 4

	defw 236, 0
	defb 4, 86, -51, 0, 1, 12, 99, 1, 0, -13, -43, -1, -3, -85, -7, 0, &80
	defw 240, 4

	defw 397, 0
	defb 4, 86, -51, 0, 1, 12, 99, 1, 0, -13, -43, -1, -3, -85, -7, 0, &80
	defw 400, 4

	defw 582, 0
	defb 4, 86, -51, 0, 1, 12, 99, 1, 0, -13, -43, -1, -3, -85, -7, 0, &80
	defw e|585, 4

	macro note
	defb \1,\2,\3
	defw \4
	defb \5,\6
	defw \7
	endm

C3 equ 478
D3 equ 426
F3 equ 358
C4 equ 239
Ds4 equ 201
A4 equ 142
C5 equ 119
D5 equ 106
E5 equ 95
F5 equ 89
Fs5 equ 84
G5 equ 80
A5 equ 71
C6 equ 60

mp1 defw music
mp2 defw ch2
mp3 defw ch3
tptr defw textstart

music
		; Note definition:
		; Byte 0 = channel status
		; Byte 1 = volume enveloppe
		; Byte 2 = tone enveloppe
		; Bytes 3, 4 = tone period
		; Byte 5 = noise period
		; Byte 6 = start volume
		; Byte 7,8 = duration or repeat count
		note 1,0,1,C4,0,15,54  ; 54
		note 1,0,0,C4,0,0,50   ; 104
		note 1,0,1,C4,0,15,57  ; 161
		note 1,0,0,C4,0,0,50   ; 211
		note 1,0,1,C4,0,15,57  ; 268
		note 1,0,0,C4,0,0,47   ; 315
		note 1,0,1,C4,0,15,50  ; 365
		note 1,0,0,C4,0,0,48   ; 413

		note 1,2,0,D3,0,16,355 ; 768

		note 1,3,0,Ds4,0,0,24
		note 1,3,0,Fs5,0,0,24
		note 1,3,0,C5,0,0,24   ; 840
		note 1,0,0,C5,0,0,64   ; 904

		defb 0,3

music.loop
		note 1,1,0,D3,0,0,-2
		note 1,1,0,C3,0,0,-2
		note 1,1,0,D3,0,0,-2
		note 1,1,0,C3,0,0,-2
		note 1,1,0,D3,0,0,-2
		note 1,0,0,C3,0,0,32
		note 1,1,0,F3,0,0,-2
		note 1,0,0,C3,0,0,32
		note 1,1,0,D3,0,0,-2
		note 1,1,0,C3,0,0,-2
		note 1,1,0,D3,0,0,-2
		note 1,1,0,C3,0,0,-2
		note 1,1,0,D3,0,0,-6
		note 1,0,0,C3,0,0,32

		defb 0,1

ch2
		note 2,0,0,C4,0,0,26
		note 2,0,1,C4,0,7,54
		note 2,0,0,C4,0,0,50
		note 2,0,1,C4,0,7,57
		note 2,0,0,C4,0,0,50
		note 2,0,1,C4,0,7,57
		note 2,0,0,C4,0,0,47
		note 2,0,1,C4,0,7,50
		note 2,0,0,C4,0,0,48 ; 439

		note 2,0,0,C3,0,0, 768 - 439 - 6 * 13

		note 2,4,0,1,1,0,-13

		note 2,0,0,C3,0,0, 904 - 768

		defb 0,3

ch2.loop
		note 2,0,0,C3,0,0,2*32*32

		note 2,3,0,D5,0,0,32*3
		note 2,3,0,D5,0,0,32
		note 2,3,0,F5,0,0,32
		note 2,3,0,D5,0,0,32*3
		note 2,3,0,F5,0,0,32*2
		note 2,3,0,G5,0,0,32
		note 2,3,0,C6,0,0,32
		note 2,3,0,A5,0,0,32*4

		note 2,3,0,A4,0,0,32*3
		note 2,3,0,A4,0,0,32
		note 2,3,0,C5,0,0,32
		note 2,3,0,A4,0,0,32*3
		note 2,3,0,C5,0,0,32*2
		note 2,3,0,D5,0,0,32
		note 2,3,0,G5,0,0,32
		note 2,3,0,E5,0,0,32*4
		defb 0,1

ch3
		note 4,0,0,C3,0,0,904 - 16*32
		note 4,0,0,C3,0,0,16*32
		note 4,0,0,C3,0,0,904 - 16*32
		note 4,0,0,C3,0,0,16*32
		note 4,0,0,C3,0,0,904 - 16*32
		note 4,0,0,C3,0,0,16*32
		note 4,0,0,C3,0,0,32*32
ch3.loop
		note 4,1,2,C3,0,0,32*2
		note 4,1,2,C3,6,0,32*2
		note 4,1,2,C3,0,0,32
		note 4,1,2,C3,0,0,32
		note 4,1,2,C3,6,0,32*2
		defb 0

env
		; Volume enveloppe
		; Byte 0 = number of sections
			; Byte 0 = step count
			; Byte 1 = step size
			; Byte 2 = pause time
		defb 1, 16,-1,1

henv
		defb 1

		; Section 1 (HW)
		defb 8 + 128
		defw 53

envnoise
		defb 2
		defb 0, 15, 3
		defb 0, 0, 3

envt
		; Tone enveloppe
		; Byte 0 = number of sections
			; Byte 0 = step count
			; Byte 1 = step size
			; Byte 2 = step time
		defb 1,127,-2,1

textstart
		defb &1A,10,30,0,12
		defb &1C, 2, 26, 26
		defb &02
		defb &1C, 1, 0, 0
textloop
		defb "  We are the robots  "
		defb &0F, 2
		defb "Wir sind die roboter "
		defb &0F, 1
		defb &FF

fillbuf
	; Arbitrary free space used by the FILL routine
